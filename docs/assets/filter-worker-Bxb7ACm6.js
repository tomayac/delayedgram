var l=(i,n)=>{const e=i[n];return e?typeof e=="function"?e():Promise.resolve(e):new Promise((o,r)=>{(typeof queueMicrotask=="function"?queueMicrotask:setTimeout)(r.bind(null,new Error("Unknown variable dynamic import: "+n)))})};(async()=>{const i="image/x-portable-bitmap",n="input.ppm",e="output.ppm",o=async(r,t)=>{const a=await(await l(Object.assign({"./filter-grayscale.mjs":()=>import("./filter-grayscale-DuzKwbPT.js"),"./filter-invert.mjs":()=>import("./filter-invert-CNxL4alO.js")}),`./filter-${t}.mjs`)).default(),p=await new File([r],n,{type:i}).arrayBuffer();a.FS.writeFile(n,new Uint8Array(p)),performance.mark(`${t}-start`),a.callMain([n,e]),performance.mark(`${t}-end`),performance.measure(`Apply ${t} filter`,`${t}-start`,`${t}-end`);const c=a.FS.readFile(e,{encoding:"binary"}),m=new File([c],e,{type:i});self.postMessage({ppmP3String:await m.text()}),performance.getEntriesByType("measure").forEach(s=>{console.log(s.name,s.duration.toFixed(0))})};self.addEventListener("message",async r=>{const{ppmP3String:t,filter:a}=r.data;o(t,a)})})();
